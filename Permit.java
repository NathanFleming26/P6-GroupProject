package javaapplication37;


import java.util.Hashtable;
import javaapplication37.Vehicle_info;

/* Generated by Together */

/**
 * Abstract superclass of all permit types. Note that since this class is abstract, all "instances"
 * of it are actually instances of its concrete subclasses.
 * The vehicles permitted entry by this permit are recorded here in the permittedVehicles attribute.
 * Further information could be recorded here, such as contact details for the permit holder (and for
 * the hosts in Regular and Day visitor subclasses), but in this design these details are not required.
 * Note that no permit holder may have more than one permit at any time, so no two instances of Permit
 * (through its concrete sub-classes) may have the same permit holder name. There is no direct notation
 * for this. Instead the Permit list object collecting the Permit must enforce it by checking new
 * additions (a hash table will help with this).
 *
 * For subclasses with dates:
 * No permits are issued to span from one year into the next; instead re-issue occurs "automatically" at
 * the start of the year (see the Timer use case diagram - follow hyperlink) - all permits are simply
 * carried over to the new year (except Day visitor and Regular visitor permits that expire on the last
 * day of the year). Permits which have a limited period of validity (Day visitor and Regular visitor
 * permits) are automatically cancelled from PACSUS at the start of the day following their last valid day.
 */
abstract public class Permit
{  
    //<editor-fold defaultstate="collapsed" desc="permitType">
    private int permitType;
    
    /*
        Day Visitor Permit - 1
        University Member Permit - 2
        Regular Visitor Permit - 3
        Permanent Visitor Permit - 4
    */
    
    public int getPermitType()
    {
        return permitType;
    }
    
    public void setPermitType(int permitType)
    {
        this.permitType = permitType;
    }
//</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="UID">
    private int UID;
    
    public int getUID()
    {
        return UID;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="regNo">
    private String regNo;
    
    public String getregNo()
    {
        return regNo;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="permitHolder">
    /**
     * The name of the permit holder (Stored in a hashtable and retrieved and st using a unique ID (int))
     */
    private String permitHolder;

    public String getPermitHolder()
    {
        return permitHolder;
    }
    
    public void setPermitHolder(String permitHolder)
    {
        this.permitHolder = permitHolder;
    }
//</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="noOfEntries">
    /**
     * Counts the number of days on which the campus was entered while the access barriers were in operation.
     * Counting starts when the permit is issued, and afresh at the start of each year.
     */
    private int noOfEntries = 0;
    public int getNoOfEntries()
    {
        return noOfEntries;
    }
    
    public void addEntry()
    {
        this.noOfEntries = noOfEntries + 1;
    }
//</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="warnings">
    /**
     * Counts the number of warnings issued to vehicles registered on this permit.
     */
    private int warnings = 0;
    public int getWarnings()
    {
        return warnings;
    }
    
    public void addWarning()
    {
        this.warnings = warnings + 1;
    }
//</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="suspended">
    /**
     * False if the permit has not been suspended, and true if it has (on the third warning).
     */
    private boolean suspended = false;
    public boolean isSuspended()
    {
        return suspended;
    }
    
    public void setSuspended(boolean suspended)
    {
        this.suspended = suspended;
    }
//</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="enteredToday">
    /**
     * Set to false at the start of each day. Remains false until first entry of a vehicle on this permit,
     * when it is set true, and the vehicle is noted in vehicleUsed. Used for checking that subsequent
     * entries in the day are the same vehicle (since exits are not monitored).
     */
    private boolean enteredToday = false;
    
    public boolean isEnteredToday()
    {
        return enteredToday;
    }
    
    public void setEnteredToday(boolean enteredToday)
    {
        this.enteredToday = enteredToday;
    }
//</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="vehicleUsedToday">
    /**
     * Once a vehicle has entered on this permit on any day, this attribute records the vehicle that
     * entered, so that any subsequent entries associated with this permit can be verified as the same
     * vehicle (or at least with the same registration number!).
     * The attribute will be null until a vehicle has entered.
     * @clientCardinality 1
     * @directed true
     * @label Allowed today
     * @supplierCardinality 0..1
     */
    private Vehicle_info vehicleUsedToday;
    
    public Vehicle_info getVehicleUsedToday()
    {
        return vehicleUsedToday;
    }
    
    public void setVehicleUsedToday(Vehicle_info vehicleUsedToday)
    {
        this.vehicleUsedToday = vehicleUsedToday;
    }
//</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="setPermittedVehicles">
    /**
     * This holds references to all the Vehicle_info instances for the vehicles registered to this permit.
     * Note that any vehicle can be registered to only one permit, but many vehicles may be registered to
     * the same permit.
     * This attribute must be implemented by a collection data structure (such as array, hash table,...).
     * @clientCardinality 1
     * @directed true
     * @label Controls access of
     * @supplierCardinality 0..*
     */
    private Hashtable permittedVehicles;
    
    public Hashtable getPermittedVehicles()
    {
        return permittedVehicles;
    }
//</editor-fold>
    
    public Permit(int UID, int permitType, String permitHolderName, String regNo, int noOfEntries, int warnings, boolean suspended, boolean enteredToday, Vehicle_info vehicleUsedToday, Hashtable permittedVehicles)//Permit constructor when making a new permit
    {
        this.permitHolder = permitHolderName;
        
        this.regNo = regNo;
        
        this.noOfEntries = noOfEntries;
        
        this.warnings = warnings;
        
        this.suspended = suspended;
        
        this.enteredToday = enteredToday;
        
        this.vehicleUsedToday = vehicleUsedToday;
        
        this.permittedVehicles = permittedVehicles;
    }
}
