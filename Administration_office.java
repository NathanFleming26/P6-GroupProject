import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showMessageDialog;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;

/* Generated by Together */

/**
 * This class represents the interactive interface to PACSUS administration functions carried
 * out in the Estates and Campus Services Office.  Information about these functions is in the
 * Administration use case diagram (hyperlinked from this class).
 *
 * The interface comprises one screen with all the functions present on it: they could all be on
 * view at once, or perhaps in alternative JPanels (in a JFrame with JTabbedPane); the current
 * date (day number) is always displayed.
 *
 * There could be any number of instances of this class, potentially one for each workstation
 * in the office, with different staff carrying different functions.
 *
 * The class implements Observer, and observes the system status so that it can keep the displayed current date correct.
 * @stereotype boundary
 */
public class Administration_office extends JFrame implements Observer, ActionListener {
	/**
	 * Each instance of Administration_office has a navigable association to the permit list so
	 * that it can enquire about/add/delete/modify permits.
	 * @supplierCardinality 1
	 * @clientCardinality 1..*
	 * @label Administration functions
	 * @directed
	 */
	private Permit_list lnkPermit_list;

	/**
	 * Each instance of Administration_office has a navigable association to the vehicle list so
	 * that it can enquire about/add/delete/modify vehicle details.
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label Administration functions
	 * @directed
	 */
	private Vehicle_list lnkVehicle_list;

	/**
	 * Each instance of Administration_office has a navigable association to the system status so
	 * that it can find out status information about the system.
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label See date
	 * @directed
	 */
	
	//global variables
	private System_status lnkSystem_status;
	private int date=1;
	boolean editable = false;

	//Declare elements used in JFrame
	
	//BUTTONS
	private JButton btnAdd, btnRecordWarning, btnDeleteWarning, btnCancel, btnEnquire, btnModify, btnEnqClear,btnAddClear, btnRetrieveDetails, btnModClear;
	
	//ELEMENTS FOR ADDING PERMIT
	private JLabel lblAddName, lblAddReg, lblAddMake, lblAddModel, lblAddColour, lblSetType, 
	lblAddDate, lblAddHost;
	private JTextField txtAddName, txtAddReg, txtAddMake, txtAddModel, txtAddColour, txtAddDate, txtAddHost;
	private JComboBox bxSetType;
	
	//ELEMENTS FOR WARNING PERMIT
	private JLabel lblWarnReg, lblWarnRec  ;
	private JTextField txtWarnReg;
	
	//ELEMENTS FOR DELETING WARNINGS
	private JLabel lblDelWarning;
	private JTextField txtDelWarningReg;
	
	//ELEMENTS FOR CANCELLING PERMIT
	private JLabel lblRegCancel, lblCancel;
	private JTextField txtRegCancel;
	
	//ELEMENTS FOR ENQUIRY
	private JLabel lbleEnqName, lblEnqReg, lbleEnqMake, lbleEnqModel, lbleEnqColour, lblEnqType, lblEnqHost, lblEnqWarnings, lblEnqSuspended, lblEnqAccess;
	private JTextField txtEnqName, txtEnqReg, txtEnqMake, txteEnqModel, txtEnqColour, txtEnqType, txtEnqWarnings, txtEnqSuspended, txtEnqAccess, txtEnqHost;

	//ELEMENTS FOR MODIFYING PERMIT
	private JLabel lblModName, lblModReg, lblModMake, lblModModel, lblModColour, lblModType, lblModHost;
	private JTextField txtModName, txtModReg, txtModMake, txtModModel, txtModColour, txtModType, txtModHost;

	//ALL OF THE TABS ON THE WINDOW
	private JPanel addPermit, recWarning, delWarning, cancelPermit, statusEnquiry, modPermit;
	
	//DECLARE TABBED PANE AND LAYOUT FOR PANES
	private JTabbedPane tab;
	private GridLayout grid;

	/*
	 * Constructor for admin office, this sets up the UI and displays it
	 */
	public Administration_office(System_status s, Vehicle_list v, Permit_list p) {		//Constructor for Administration_office, sets up the window 
		//Assign global variables to parameters passed to this constructor
		lnkSystem_status = s;
		lnkVehicle_list = v;
		lnkPermit_list = p;

		//initial window settings
		setTitle("Administation Office   " + date);
		setLocation(40,200);
		setSize(450,350);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		Container window = getContentPane();


		//sets a tabbed pane and declare JPanels used within in
		tab = new JTabbedPane();
		addPermit = new JPanel();
		recWarning = new JPanel();
		delWarning = new JPanel();
		cancelPermit = new JPanel();
		statusEnquiry = new JPanel();
		modPermit = new JPanel();

		//layout of the tabs, uses a gridlayout 
		grid = new GridLayout(0, 2);
		addPermit.setLayout(grid);
		recWarning.setLayout(grid);
		delWarning.setLayout(grid);
		cancelPermit.setLayout(grid);
		statusEnquiry.setLayout(grid);
		modPermit.setLayout(grid);


		//PERMIT TAB - Add all the addPermit elements
		lblAddName = new JLabel("Name:");
		txtAddName = new JTextField("", 15);
		addPermit.add(lblAddName, BorderLayout.CENTER);
		addPermit.add(txtAddName, BorderLayout.CENTER);

		lblAddReg = new JLabel("Registration Number:");
		txtAddReg = new JTextField("", 15);
		addPermit.add(lblAddReg, BorderLayout.CENTER);
		addPermit.add(txtAddReg, BorderLayout.CENTER);

		lblAddMake = new JLabel("Car make: ");
		txtAddMake = new JTextField("", 15);
		addPermit.add(lblAddMake);
		addPermit.add(txtAddMake);

		lblAddModel = new JLabel("Car model: ");
		txtAddModel = new JTextField("", 15);
		addPermit.add(lblAddModel);
		addPermit.add(txtAddModel);

		lblAddColour = new JLabel("Car colour: ");
		txtAddColour = new JTextField("", 15);
		addPermit.add(lblAddColour);
		addPermit.add(txtAddColour);


		String[] permitTypes = {"Day Visitor", "University Member", "Regular Visitor", "Permanent Visitor"};	//available types of passes, allows user to select one
		lblSetType = new JLabel("Enter Permit Type: ");
		bxSetType = new JComboBox(permitTypes);
		bxSetType.setSelectedIndex(0);
		addPermit.add(lblSetType);
		addPermit.add(bxSetType);

		lblAddDate = new JLabel("Visit date: ");
		txtAddDate = new JTextField("", 15);
		addPermit.add(lblAddDate);
		addPermit.add(txtAddDate);

		lblAddHost = new JLabel("Host name: ");
		txtAddHost = new JTextField("", 15);
		addPermit.add(lblAddHost);
		addPermit.add(txtAddHost);

		btnAdd = new JButton("Submit");
		btnAdd.addActionListener(this);
		addPermit.add(btnAdd);
		
		btnAddClear = new JButton("Clear");
		btnAddClear.addActionListener(this);
		addPermit.add(btnAddClear);


		//WARNING TAB - add warningTab elements
		lblWarnReg = new JLabel("Registration Number: ");
		txtWarnReg = new JTextField("", 15);
		recWarning.add(lblWarnReg, BorderLayout.CENTER);
		recWarning.add(txtWarnReg, BorderLayout.CENTER);

		lblWarnRec = new JLabel("Record warning");
		recWarning.add(lblWarnRec, BorderLayout.CENTER);
		btnRecordWarning = new JButton("Record");
		btnRecordWarning.addActionListener(this);
		recWarning.add(btnRecordWarning);


		//DELETE WARNING TAB - add all delete warning elements
		lblDelWarning = new JLabel("Registration Number:");
		txtDelWarningReg = new JTextField("", 15);
		delWarning.add(lblDelWarning, BorderLayout.CENTER);
		delWarning.add(txtDelWarningReg, BorderLayout.CENTER);

		lblDelWarning = new JLabel("Delete warning");
		delWarning.add(lblDelWarning, BorderLayout.CENTER);
		btnDeleteWarning = new JButton("Delete");
		btnDeleteWarning.addActionListener(this);
		delWarning.add(btnDeleteWarning);

		//CANCEL PERMIT TAB - Add all cancel permit elements
		lblRegCancel = new JLabel("Permit holder name:");
		txtRegCancel = new JTextField("", 15);
		cancelPermit.add(lblRegCancel, BorderLayout.CENTER);
		cancelPermit.add(txtRegCancel, BorderLayout.CENTER);

		lblCancel = new JLabel("Cancel Permit");
		cancelPermit.add(lblCancel, BorderLayout.CENTER);
		btnCancel = new JButton("Cancel");
		btnCancel.addActionListener(this);
		cancelPermit.add(btnCancel);

		//STATUS ENQUIRY TAB - Add all status enquiry elements
		lbleEnqName = new JLabel("Name:");
		txtEnqName = new JTextField("", 15);
		statusEnquiry.add(lbleEnqName, BorderLayout.CENTER);
		statusEnquiry.add(txtEnqName, BorderLayout.CENTER);

		lblEnqReg = new JLabel("Registration Number:");
		txtEnqReg = new JTextField("", 15);
		txtEnqReg.setEditable(false);
		statusEnquiry.add(lblEnqReg, BorderLayout.CENTER);
		statusEnquiry.add(txtEnqReg, BorderLayout.CENTER);

		lbleEnqMake = new JLabel("Car make: ");
		txtEnqMake = new JTextField("", 15);
		txtEnqMake.setEditable(false);
		statusEnquiry.add(lbleEnqMake);
		statusEnquiry.add(txtEnqMake);

		lbleEnqModel = new JLabel("Car model: ");
		txteEnqModel = new JTextField("", 15);
		txteEnqModel.setEditable(false);
		statusEnquiry.add(lbleEnqModel);
		statusEnquiry.add(txteEnqModel);

		lbleEnqColour = new JLabel("Car colour: ");
		txtEnqColour = new JTextField("", 15);
		txtEnqColour.setEditable(false);
		statusEnquiry.add(lbleEnqColour);
		statusEnquiry.add(txtEnqColour);

		lblEnqType = new JLabel("Permit Type: ");
		txtEnqType = new JTextField("", 15);
		txtEnqType.setEditable(false);
		statusEnquiry.add(lblEnqType);
		statusEnquiry.add(txtEnqType);

		lblEnqHost = new JLabel("Host name: ");
		txtEnqHost = new JTextField("", 15);
		txtEnqHost.setEditable(false);
		statusEnquiry.add(lblEnqHost);
		statusEnquiry.add(txtEnqHost);

		lblEnqWarnings = new JLabel("Warnings: ");
		txtEnqWarnings = new JTextField("", 15);
		txtEnqWarnings.setEditable(false);
		statusEnquiry.add(lblEnqWarnings);
		statusEnquiry.add(txtEnqWarnings);

		lblEnqSuspended = new JLabel("Suspended: ");
		txtEnqSuspended = new JTextField("", 15);
		txtEnqSuspended.setEditable(false);
		statusEnquiry.add(lblEnqSuspended);
		statusEnquiry.add(txtEnqSuspended);

		lblEnqAccess = new JLabel("Times accessed: ");
		txtEnqAccess = new JTextField("", 15);
		txtEnqAccess.setEditable(false);
		statusEnquiry.add(lblEnqAccess);
		statusEnquiry.add(txtEnqAccess);

		btnEnquire = new JButton("Enquire");
		btnEnquire.addActionListener(this);
		statusEnquiry.add(btnEnquire);

		btnEnqClear = new JButton("Clear");
		btnEnqClear.addActionListener(this);
		statusEnquiry.add(btnEnqClear);



		//MODIFY PERMIT TAB - add modify permit elements
		lblModName = new JLabel("Name:");
		txtModName = new JTextField("", 15);
		modPermit.add(lblModName, BorderLayout.CENTER);
		modPermit.add(txtModName, BorderLayout.CENTER);

		lblModReg = new JLabel("Registration Number:");
		txtModReg = new JTextField("", 15);
		txtModReg.setEditable(false);
		modPermit.add(lblModReg, BorderLayout.CENTER);
		modPermit.add(txtModReg, BorderLayout.CENTER);

		lblModMake = new JLabel("Car make: ");
		txtModMake = new JTextField("", 15);
		txtModMake.setEditable(false);
		modPermit.add(lblModMake);
		modPermit.add(txtModMake);

		lblModModel = new JLabel("Car model: ");
		txtModModel = new JTextField("", 15);
		txtModModel.setEditable(false);
		modPermit.add(lblModModel);
		modPermit.add(txtModModel);

		lblModColour = new JLabel("Car colour: ");
		txtModColour = new JTextField("", 15);
		txtModColour.setEditable(false);
		modPermit.add(lblModColour);
		modPermit.add(txtModColour);

		lblModType = new JLabel("Permit Type: ");
		txtModType = new JTextField("", 15);
		txtModType.setEditable(false);
		modPermit.add(lblModType);
		modPermit.add(txtModType);

		lblModHost = new JLabel("Host name: ");
		txtModHost = new JTextField("", 15);
		txtModHost.setEditable(false);
		modPermit.add(lblModHost);
		modPermit.add(txtModHost);

		btnRetrieveDetails = new JButton("Retrieve");
		btnRetrieveDetails.addActionListener(this);
		modPermit.add(btnRetrieveDetails);

		btnModify = new JButton("Modify");
		btnModify.addActionListener(this);
		modPermit.add(btnModify);

		btnModClear = new JButton("Clear");
		btnModClear.addActionListener(this);
		modPermit.add(btnModClear);


		//Adds all the tabs
		tab.addTab("Add permit", addPermit);
		tab.addTab("Record warning", recWarning);
		tab.addTab("Delete warning", delWarning);
		tab.addTab("Cancel permit", cancelPermit);
		tab.addTab("Status Enquiry", statusEnquiry);
		tab.addTab("Modify Permit", modPermit);
		tab.setSelectedIndex(0);

		window.add(tab);
		setVisible(true);
		lnkSystem_status.addObserver(this);
		//Clear all fields
		clearFields();
	}


	@Override
	public void update(Observable o, Object arg) {	//gets any updates
		date = lnkSystem_status.getDate();
		setTitle("Administration Office  " + date);


	}




	@Override
	//If a button is pressed
	public void actionPerformed(ActionEvent e) {
		String[] permitTypes = {"","Day Visitor", "University Member", "Regular Visitor", "Permanent Visitor"};
		if (e.getSource()==btnAdd) {			//Add permit
			String name = txtAddName.getText();		//Get everything entered into text boxes
			String reg = txtAddReg.getText();
			String make = txtAddMake.getText();
			String model = txtAddModel.getText();
			String colour = txtAddColour.getText();
			String type = (String) bxSetType.getSelectedItem();
			String date = txtAddDate.getText();
			String host = txtAddHost.getText();

			if(name.equals("") || reg.equals("") || make.equals("") || model.equals("")|| colour.equals("")|| date.equals(""))
			{//Check that all the fields havee been filled
				// Popup Message
				showMessageDialog(null, "Please fill in all fields", "Error", JOptionPane.ERROR_MESSAGE);

			}else if (type.equals("Day Visitor") && host.equals("")) {
				showMessageDialog(null, "Day visitors need a host", "Error", JOptionPane.ERROR_MESSAGE);
			}else if (type.equals("Regular Visitor") && host.equals("")) {
				showMessageDialog(null, "Regular Visitor need a host", "Error", JOptionPane.ERROR_MESSAGE);
			}else if(lnkPermit_list.hasPermit(name)) {
				showMessageDialog(null, "User already has a permit", "Error", JOptionPane.ERROR_MESSAGE);
			}


			else {

				if (type.equals("Day Visitor")) {//Add a day visitor
					if (lnkPermit_list.hasPermit(host)) {
						lnkVehicle_list.addVehicle(reg, make, model, colour, name);
						Vehicle_info v = lnkVehicle_list.getVehicle(reg);
						lnkPermit_list.addPermit(1, name, host, 1, v);
						//Display Confirmation
						showMessageDialog(null, "Day Visitor Added", "Permit Added", JOptionPane.INFORMATION_MESSAGE);
					}else {//Error
						showMessageDialog(null, "Permit unsuccessful, host does not have a permit", "Error", JOptionPane.ERROR_MESSAGE);
					}

				}else if (type.equals("University Member")) {//Add a university member
					lnkVehicle_list.addVehicle(reg, make, model, colour, name);
					Vehicle_info v = lnkVehicle_list.getVehicle(reg);		//creates vehicle, then gets it so it can be inserted into the permit
					lnkPermit_list.addPermit(2, name, host, 0, v);
					showMessageDialog(null, "University Member Added", "Permit Added", JOptionPane.INFORMATION_MESSAGE);


				}else if (type.equals("Regular Visitor")) {//Add a regular visitor
					if (lnkPermit_list.hasPermit(host)) {
						lnkVehicle_list.addVehicle(reg, make, model, colour, name);
						Vehicle_info v = lnkVehicle_list.getVehicle(reg);
						lnkPermit_list.addPermit(3, name, host, 0, v);
						showMessageDialog(null, "Regular Visitor Added", "Permit Added", JOptionPane.INFORMATION_MESSAGE);
					}else {
						showMessageDialog(null, "Permit unsuccessful, host does not have a permit", "Error", JOptionPane.ERROR_MESSAGE);
					}



				}else if (type.equals("Permanent Visitor")) {//Add a Prermanent visitor
					lnkVehicle_list.addVehicle(reg, make, model, colour, name);
					Vehicle_info v = lnkVehicle_list.getVehicle(reg);
					lnkPermit_list.addPermit(4, name, host, 0, v);	
					showMessageDialog(null, "Permanent Visitor Added", "Permit Added", JOptionPane.INFORMATION_MESSAGE);
				}
			}

		}else if (e.getSource()==btnRecordWarning) {	//Record Warning
			String reg2 = txtWarnReg.getText();
			if (reg2.equals("")) {
				showMessageDialog(null, "Please fill in all fields", "Error", JOptionPane.ERROR_MESSAGE);
			}
			else if(lnkVehicle_list.setWarning(reg2)) {//Add a warning to the vehicle specified
					showMessageDialog(null, "Warning to "+ reg2+" Added", "Warning", JOptionPane.INFORMATION_MESSAGE);
			}else {
					showMessageDialog(null, "Warning to "+ reg2+" unsuccessful, vehicle does not exist, or is suspended", "Warning", JOptionPane.INFORMATION_MESSAGE);
			}
			

		}else if (e.getSource()==btnDeleteWarning) {	//Delete Warning
			String reg3 = txtDelWarningReg.getText();
			if (reg3.equals("")) {//Ensure the field has been filled in appropriately
				showMessageDialog(null, "Please fill in all fields", "Error", JOptionPane.ERROR_MESSAGE);
			}else if(lnkVehicle_list.deleteWarning(reg3)) {
				showMessageDialog(null, "Warning to "+ reg3+" deleted", "Warning", JOptionPane.INFORMATION_MESSAGE);
			}else {
				showMessageDialog(null, "Warning delete unsuccessful, vehicle doesnt exist or doesnt have warnings", "Error", JOptionPane.ERROR_MESSAGE);
			}

		}else if (e.getSource()==btnCancel) {	//Cancel Permit
			String reg4 = txtRegCancel.getText();
			if (reg4.equals("")) {
				showMessageDialog(null, "Please fill in all fields", "Error", JOptionPane.ERROR_MESSAGE);
			}else if(lnkPermit_list.removePermit(reg4)) {
				showMessageDialog(null, "Permit for "+ reg4+" cancelled", "Cancel", JOptionPane.INFORMATION_MESSAGE);
			}else {
				showMessageDialog(null, "Unsucessful, vehicle does not have a permit", "Cancel", JOptionPane.ERROR_MESSAGE);
			}
			clearFields();

		}else if (e.getSource()==btnEnquire) {	//Status Enquiry - A member of the administration is able to obtain status details for a given user: details of permit, whether warnings are recorded, whether suspended, and how many entries to campus have occurred since the permit was issued.
			String eName = txtEnqName.getText();
			if (eName.equals("")) {
				showMessageDialog(null, "Please fill in all fields", "Error", JOptionPane.ERROR_MESSAGE);
			}else if (lnkPermit_list.hasPermit(eName))
			{
				Permit p = lnkPermit_list.getPermit(eName);
				Vehicle_info v = p.getVehicle();
				showMessageDialog(null, "Vehicle found", "Cancel", JOptionPane.INFORMATION_MESSAGE);
				
				txtEnqReg.setText(v.getReg());
				txtEnqMake.setText(v.getMake());
				txteEnqModel.setText(v.getModel());
				txtEnqColour.setText(v.getColour());
				txtEnqHost.setText(p.getHostName());
				txtEnqType.setText(permitTypes[p.getPermitType()]);
				txtEnqWarnings.setText(String.valueOf(v.getWarning()));
				txtEnqSuspended.setText(String.valueOf(v.getSuspended()));
				txtEnqAccess.setText(String.valueOf(v.getAccesses()));
			}else {
				showMessageDialog(null, "Unable to find permit", "Cancel", JOptionPane.ERROR_MESSAGE);
				txtEnqReg.setText("");
				txtEnqMake.setText("");
				txteEnqModel.setText("");
				txtEnqColour.setText("");
				txtEnqHost.setText("");
				txtEnqType.setText("");
				txtEnqWarnings.setText("");
				txtEnqSuspended.setText("");
				txtEnqAccess.setText("");
			}

		}else if (e.getSource()==btnEnqClear||e.getSource()==btnAddClear) {	//clear text boxes

			clearFields();

		}
		else if (e.getSource()==btnRetrieveDetails) {	//Modify permit(vehicle retrieved and can now be modified)
			String eName = txtModName.getText();
			if (eName.equals("")) {
				showMessageDialog(null, "Please fill in all fields", "Error", JOptionPane.ERROR_MESSAGE);
			}
			else if (lnkPermit_list.hasPermit(eName))//Display details of permit and vehicle
			{
				Permit p = lnkPermit_list.getPermit(eName);
				Vehicle_info v = p.getVehicle();
				int type =p.getPermitType();
				txtModName.setEditable(false);
				txtModReg.setText(v.getReg());
				txtModMake.setText(v.getMake());
				txtModMake.setEditable(true);
				txtModModel.setText(v.getModel());
				txtModModel.setEditable(true);
				txtModColour.setText(v.getColour());
				txtModColour.setEditable(true);
				txtModType.setText(permitTypes[p.getPermitType()]);	//THIS STILL NEEDS TO BE DROP DOWN
				txtModHost.setText(p.getHostName());
				if (type==1||type==3) {
				txtModHost.setEditable(true);
				}

				editable = true;
			}
		}else if (e.getSource()==btnModify&&editable==true) {	//mofify permit(has clicked modify to change details)
			String eName = txtModName.getText();
			String eReg = txtEnqReg.getText();
			Permit p = lnkPermit_list.getPermit(eName);
			Vehicle_info v = p.getVehicle();
			String make=txtModMake.getText();
			String model = txtModModel.getText();
			String colour = txtModColour.getText();
			String host = txtModHost.getText();
			int type =p.getPermitType();
			
			//display error messages
			if (make.equals("") || model.equals("")|| colour.equals("")) {
				showMessageDialog(null, "You cannot leave details blank", "Error", JOptionPane.ERROR_MESSAGE);
			}else if (type==1 && host.equals("") ) {
				showMessageDialog(null, "Day visitors require a host", "Error", JOptionPane.ERROR_MESSAGE);
			}else if (type==3 && host.equals("") ) {
				showMessageDialog(null, "Regular visitors require a host", "Error", JOptionPane.ERROR_MESSAGE);
			}
			else {
				//Update details
				v.setMake(make);
				v.setModel(model);
				v.setColour(colour);
				p.setHostName(host);

				//dont allow further editing until retrieved again
				txtModReg.setEditable(false);
				txtModMake.setEditable(false);
				txtModModel.setEditable(false);
				txtModColour.setEditable(false);
				txtModHost.setEditable(false);
				showMessageDialog(null, "Vehicle modified", "Modified", JOptionPane.INFORMATION_MESSAGE);

				editable = false;
			}

		}else if (e.getSource()==btnModClear) {	//modify permit clear boxes
				//clear details
				txtModName.setText("");
				txtModReg.setText("");
				txtModMake.setText("");
				txtModModel.setText("");
				txtModColour.setText("");

				txtModType.setText("");
				txtModName.setEditable(true);
				txtModType.setEditable(false);
				txtModReg.setEditable(false);
				txtModMake.setEditable(false);
				txtModModel.setEditable(false);
				txtModColour.setEditable(false);
				txtModHost.setEditable(false);
		}

	}
	public void clearFields()//This method will clear all text fields when calle
	{
	    txtAddName.setText("");
	    txtAddReg.setText("");
	    txtAddMake.setText("");
	    txtAddModel.setText("");
	    txtAddColour.setText("");
	    bxSetType.setSelectedIndex(0);
	    txtAddDate.setText("");
	    txtAddHost.setText("");

	    txtWarnReg.setText("");

	    txtDelWarningReg.setText("");

	    txtRegCancel.setText("");
	    
	    txtEnqReg.setText("");
	    txtEnqMake.setText("");
	    txteEnqModel.setText("");
	    txtEnqColour.setText("");
	    txtEnqHost.setText("");
	    txtEnqType.setText("");
	    txtEnqWarnings.setText("");
	    txtEnqSuspended.setText("");
	    txtEnqAccess.setText("");
		
	}
}
