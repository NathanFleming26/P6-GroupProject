package javaapplication37;


import javaapplication37.Date;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Set;
import javaapplication37.Day_visitor_permit;
import javaapplication37.University_member_permit;
import javaapplication37.Vehicle_info;

/* Generated by Together */

/**
 * Permit list manages the collection of permits currently issued and not yet cancelled (or expired).
 * It handles most of the use cases in the Administration section. Note that each Permit must have a
 * unique permit holder name (so a HashTable is probably a good implementation of the collection, with
 * permit holder name as key).
 *
 * There will only be one instance of this class.
 */
public class Permit_list 
{
    /** The Permit list maintains a collection of the Permits currently issued.
     *
     * This association must be implemented by an attribute holding a collection data structure (for
     * example: array, hash table - the latter is recommended).
     *
     * Note that no two Permits may have the same permit holder name (this information is not represented diagrammatically).
     * @associates Permit
     * @label Contains
     * @clientCardinality 1
     * @supplierCardinality 0..*
     * @directed*/
    private Hashtable lnkPermit;
    
    //Stores the UID to assign to new permits
    private int UID = 1;
    
    //Class delcerations to use when dealing with permits
    Date d1 = new Date();
    Vehicle_info VI;
    Vehicle_info VI2 = new Vehicle_info("SE17 QPR");
    
    public Permit_list() 
    {
        //Initialise and populate hashtable
        lnkPermit = new Hashtable();

        University_member_permit p1 = new University_member_permit(UID, 2, "Cameron Savoury", VI2.getReg(), 0, 0, false, false, VI2.enteredToday(VI.getReg()), VI2.permittedVehicles(VI2.getReg(), UID), d1.getDayNumber());
        lnkPermit.put(UID, p1);
        newUID();

        Day_visitor_permit p2 = new Day_visitor_permit(UID, 1, "Bruce Spence", VI2.getReg(), 0, 0, false, false, VI2.enteredToday(VI2.getReg()), VI2.permittedVehicles(VI2.getReg(), UID), d1.getDayNumber(), "Nathan Fleming");
        lnkPermit.put(UID, p2);
        newUID();

        Permanent_visitor_permit p3 = new Permanent_visitor_permit(UID, 4, "Cameron Savoury", VI2.getReg(), 0, 0, false, false, VI2.enteredToday(VI2.getReg()), VI2.permittedVehicles(VI2.getReg(), UID), d1.getDayNumber());
        lnkPermit.put(p3.getUID(), p3);
        newUID();
    }
    
     public boolean addPermit(int permitType, String permitHolder, String hostName, int lengthOfStay) 
     {  
        newUID(); //Ensure the UID to be used will not alredy exist in the table
        
        boolean addedSuccessfully = false; //Returns true if the permit was added and false if not
        
        //Add permit to hash table
        switch(permitType)
        {
            //Day Visitor Permit
            case 1:
                Day_visitor_permit DVP = new Day_visitor_permit(UID, 1, permitHolder, VI.getReg(), 0, 0, false, false, VI, VI.permittedVehicles(VI.getReg(), UID), d1.getDayNumber(), hostName);
                lnkPermit.put(UID, DVP);
                newUID();
                addedSuccessfully = true;
                break;
            //University Member Permit
            case 2:
                University_member_permit UMP = new University_member_permit(UID, 2, permitHolder, VI.getReg(), 0, 0, false, false, VI, VI.permittedVehicles(VI.getReg(), UID), d1.getDayNumber());
                lnkPermit.put(UID, UMP);
                newUID();
                addedSuccessfully = true;
                break;
            //Regular Visitor Permit
            case 3:
                Regular_visitor_permit RVP = new Regular_visitor_permit(UID, 3, permitHolder, VI.getReg(), 0, 0, false, false, VI, VI.permittedVehicles(VI.getReg(), UID), d1.getDayNumber(), (d1.getDayNumber()+lengthOfStay), hostName);
                lnkPermit.put(UID, RVP);
                newUID();
                addedSuccessfully = true;
                break;
            //Permanent Visitor Permit
            case 4:
                Permanent_visitor_permit PVP = new Permanent_visitor_permit(UID, 4, permitHolder, VI.getReg(), 0, 0, false, false, VI, VI.permittedVehicles(VI.getReg(), UID), d1.getDayNumber());
                lnkPermit.put(UID, PVP);
                newUID();
                addedSuccessfully = true;
                break;
        }
        
        return addedSuccessfully;
     }
     
     public void details() //Prints all of the detils of the permits currently stored in the hashTable
     {
        Set<String> permits = lnkPermit.keySet();
        Iterator<String> iterator = permits.iterator();

        while (iterator.hasNext()) {
            String key = iterator.next();
            Permit p = (Permit) lnkPermit.get(key);
            System.out.println( "\nPermit ID: " + p.getUID() + 
                                "\nPermit Holder: " + p.getPermitHolder() + 
                                "\nNo of Entries: " + p.getNoOfEntries() +
                                "\nWarnings: " + p.getWarnings() +  
                                "\nSuspended: " + p.isSuspended() +
                                "\nEntered Today: " + p.isEnteredToday() +
                                "\nRegistered Vehicles: " + p.getPermittedVehicles() +
                                "\n");
        }
    }
     
    public boolean removePermit(int UID)
    {
        boolean removedSuccessfully = false;
        
        //Check the permit exists
        if(lnkPermit.containsKey(UID))
        {
            lnkPermit.remove(UID); //Removes it from the list
            removedSuccessfully = true;
        }
        
        return removedSuccessfully;
    }
        
     
     public int newUID()
     {
         if(lnkPermit.containsKey(UID))
         {
             UID = UID + 1;
         }
         else
         {
             return UID;
         }
         
         return UID;
     }
            
}
