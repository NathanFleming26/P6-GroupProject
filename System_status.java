import java.util.LinkedList;
import java.util.Observable;
import java.util.Queue;

/* Generated by Together */

/**
 * This class holds key control information for the operation of the barrier system.
 *
 * It extends Observable, and notifies its observers whenever either the date changes
 * (caused by the Timer class), or the barrier system activity status changes (caused
 * by an instance of the Campus security class), or the barrier event log changes (caused
 * by an instance of the Barrier class).
 *
 * There will only be one instance of this class.
 */
public class System_status extends Observable {
	/**
	 * This attribute is the central indication of the activity status of the whole barrier
	 * system. It is set/unset by messages from instances of the Campus security class.
	 */
	private boolean systemActive = false;
	//Method to change the systemActive boolean to the value passed in the method call from the campus security class
	public void setSystemStaus(boolean changeTo)
	{
		systemActive = changeTo;
        setChanged();
        notifyObservers();         // Note: notifies ALL Observing views
	}
    public boolean getSystemStatus()
    {
        //return systemActive;
        return systemActive;
    }

	/**
	 * An array of strings showing recent attempts to pass through the barriers (both successful
	 * and unsuccessful). The last 20 should be enough? These are intended for display on
	 * the Campus_security screens.
	 */
	private Queue<String> log = new LinkedList<String>();

	public void addToLog(boolean barrierStatus)
	{
		//Initialisation of variables to be used
		String barrierStatusStr = "";
		String fullEntry = "";
		int date = 1;
		//String formattedDate = myDateObj.format(myFormatObj);

		//Format based on status of the barrier
		if(barrierStatus && systemActive) //If barrier is already raised
		{
			barrierStatusStr = "Raised";
			fullEntry = "Attempt to change barrier status to " + barrierStatusStr + "  was made on " + date + " however the barrier was already " + barrierStatusStr +"\n";   
		}
		else if (!barrierStatus && !systemActive) //If barrier is already lowered
		{
			barrierStatusStr = "Lowered";
			fullEntry = "Attempt to change barrier status to " + barrierStatusStr + "  was made on " + date + " however the barrier was already " + barrierStatusStr+"\n"; 
		}
		else if(barrierStatus && !systemActive) //If barrier is already lowered but to be raised
		{
			barrierStatusStr = "Raised";
			fullEntry = "Barrier was " + barrierStatusStr + " on " + date+"\n";
		}
		else if(!barrierStatus && systemActive) //If barrier is already raised but to be lowered
		{

			barrierStatusStr = "Lowered";
			fullEntry = "Barrier was " + barrierStatusStr + " on " + date+"\n";
		}
		else //Error
		{
			System.out.println("Error adding to log \n");
			return;
		}

		if(log.size()<20) //To keep the list only storing the latest 20 entries
		{
			log.add(fullEntry);
		}
		else
		{
			log.remove(); //remove the oldest entry (at the head)
			log.add(fullEntry); //and then iterate the list
		}
	}

	public String getLog()
	{
		return log.toString();
	}

	/**
	 * This attribute is kept up to date by the Timer.
	 * @clientCardinality 1
	 * @supplierCardinality 1
	 * @link aggregation
	 * @label Contains
	 * @directed
	 */
	private Date today;
}
